table[style='border-collapse: collapse']
  - @grid.each do |row|
    tr
      - row.each do |value|
        td[style="height: 1px; width: 1px; background-color: rgba(#{ (value * 255).to_i },#{ (value * 127).to_i },#{ 255 - (value * 255).to_i },1); padding: 0"]

- q = Quaternion(0, -1, 0, -1)
- phi = TAU/24

javascript:
  (function() {    
    window.dragPolyhedron = function(svg_elt, polyhedron){
      var x = 0
      var y = 0
      
      var q = new Quaternion(0, 1, 0, 0)
      var phi = 0
      
      var perspective = -128
      
      var rotatePolyhedron = function(){
        t = + new Date()
        polyhedron = polyhedron.rotate(q, phi)
        console.log("rotate " + (+ new Date() - t))
        t = + new Date()
        polyhedron.toSvg(svg_elt, new Quaternion(0, 0, 0, perspective))
        console.log("tosvg " + (+ new Date() - t) + " (16)")
        console.log("--")
      }

      var drag = function(e){
        move_x = e.screenX - x
        move_y = e.screenY - y
        
        dist = Math.sqrt((move_x * move_x) + (move_y * move_y))
        if(dist > 0){
          q = new Quaternion(0, move_y, move_x, 0)
          phi = -dist*TAU/720
          
          requestAnimationFrame(rotatePolyhedron)
          
          x = e.screenX
          y = e.screenY
        }
        
        return false
      }

      var startDrag = function(e){
        x = e.screenX
        y = e.screenY
        document.onmousemove = drag
        document.onmouseup = releaseDrag
      }
      
      var releaseDrag = function(e){
        document.onmousemove = null
        document.onmouseup = null
      }
      
      svg_elt.addEventListener('mousedown', function(e){
        startDrag(e)
      })
      
      /*
      svg_elt.addEventListener('mousewheel', function(e){
        e.preventDefault()
        
        // bad scroll event, changing the perspective is weird
        perspective = perspective - e.deltaY
        polyhedron.toSvg(svg_elt, new Quaternion(0, 0, 0, perspective))
        
        // better scroll event, by translating, it's like we move the camera into the scene
        // but by doing this, we lose the origin rotation point for the mousemove event
        // polyhedron.translate(new Quaternion(0, e.deltaX, 0, e.deltaY))
        // polyhedron.toSvg(svg_elt, new Quaternion(0, 0, 0, perspective))
      })
      */
    }
  }).call(this)

/ - planet = Planet.from_polyhedron(Polyhedron.isocahedron.divide(:trifoce).unify!)
- planet = Planet.from_polyhedron(Polyhedron.noisy_isocahedron)
- ([planet] + Planet.all.reverse).each do |planet|   
  - polyhedron = planet.to_polyhedron.scale!(15)
  h4 complexity (p/f): #{ polyhedron.points.size }/#{ polyhedron.faces.size } #{ polyhedron.points.size / polyhedron.faces.size.to_f }
  svg id='demo-#{ planet.id }' class='demo' viewBox='-20 -20 40 40'
  javascript:
    (function() {
      var polyhedron = #{ polyhedron.to_js }
      var svg_elt = document.querySelector('svg#demo-#{ planet.id }')
      
      polyhedron.toSvg(svg_elt, new Quaternion(0, 0, 0, -128))
      dragPolyhedron(svg_elt, polyhedron)
    }).call(this)

/ javascript:
/   (function() {    
/     Array.prototype.forEach.call(document.querySelectorAll('svg.demo path:nth-child(15n)'), function(path){
/       path.style['fill'] = 'firebrick'
/     })
/     Array.prototype.forEach.call(document.querySelectorAll('svg.demo path:nth-child(20n)'), function(path){
/       path.style['fill'] = 'dodgerblue'
/     })
/   }).call(this)
  
  
